class Solution {
public:
    int countPalindromicSubsequences(string S) {
        int n=S.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        for(int i=0;i<n;i++){
            dp[i][i]=1;
        }
        for(int distance=1;distance<n;distance++){
            for(int i=0;i<n-distance;i++){
                int j=i+distance;
                if(S[i]!=S[j]){
                    dp[i][j]=dp[i][j-1]+dp[i+1][j]-dp[i+1][j-1];
                }
                else{
                    int low=i+1;
                    int high=j-1;
                    while(low<=j && S[low]!=S[i]){
                        low++;
                    }
                    while(j>=i && S[high]!=S[j]){
                        high--;
                    }
                    if(low>high){
                        dp[i][j]=2*dp[i+1][j-1]+2;
                    }
                    else if(low==high){
                        dp[i][j]=2*dp[i+1][j-1]+1;
                    }
                    else if(low<high){
                        dp[i][j]=2*dp[i+1][j-1]- dp[low + 1][high - 1];
                    }
                }
                dp[i][j] = dp[i][j] < 0 ? dp[i][j] + 1000000007 : dp[i][j] % 1000000007;
            }
        }
        
                return dp[0][n - 1];
    }
};
