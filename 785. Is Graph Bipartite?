class Solution {
private:
    int N;
    bool colorNode(int v, int c, vector<vector<int>> &graph, vector<int> &node_color) {
        if (node_color[v] != 0)
            return (node_color[v] == c);        
        node_color[v] = c;
        
        for (auto n : graph[v]) {
            if (!colorNode(n, (c == 1) ? 2 : 1, graph, node_color))
                return false;
        }
        return true;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        N = graph.size();
        vector<int> node_color(N, 0);
        for (int i = 0; i < graph.size(); ++i) {
            if (!node_color[i]) {
                if (!colorNode(i, 1, graph, node_color))
                    return false;
            }
        }
        return true;
    }
};
